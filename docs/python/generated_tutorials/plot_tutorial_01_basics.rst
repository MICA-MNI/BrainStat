
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "python/generated_tutorials/plot_tutorial_01_basics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_python_generated_tutorials_plot_tutorial_01_basics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_python_generated_tutorials_plot_tutorial_01_basics.py:


Tutorial 01: Linear Models
=========================================
In this tutorial you will set up your first linear model with BrainStat. 
To this end, we will first load some sample data from the MICS dataset. 

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: default


    from brainstat.datasets import fetch_mask, fetch_template_surface
    from brainstat.tutorial.utils import fetch_mics_data

    # Load behavioral markers
    thickness, demographics = fetch_mics_data()
    pial_left, pial_right = fetch_template_surface("fsaverage5", join=False)
    pial_combined = fetch_template_surface("fsaverage5", join=True)
    mask = fetch_mask("fsaverage5")








.. GENERATED FROM PYTHON SOURCE LINES 18-22

Lets have a look at the cortical thickness data. To do this,
we will use the surface plotter included with BrainSpace. As we'll
be plotting data onto these hemispheres quite often in this tutorial
we'll create a simple function for it and plot mean thickness here.

.. GENERATED FROM PYTHON SOURCE LINES 22-47

.. code-block:: default

    import numpy as np
    from brainspace.plotting import plot_hemispheres


    def local_plot_hemispheres(values, label_text, color_range, cmap="viridis"):
        # Plot cortical surfaces with values as the data, label_text as
        # the labels, and color_range as the limits of the color bar.
        return plot_hemispheres(
            pial_left,
            pial_right,
            values,
            color_bar=True,
            color_range=color_range,
            label_text=label_text,
            cmap=cmap,
            embed_nb=True,
            size=(1400, 200),
            zoom=1.45,
            nan_color=(0.7, 0.7, 0.7, 1),
            cb__labelTextProperty={"fontSize": 12},
            interactive=False,
        )


    local_plot_hemispheres(np.mean(thickness, axis=0), ["Cortical Thickness"], (1.5, 3.5))



.. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_001.png
   :alt: plot tutorial 01 basics
   :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <IPython.core.display.Image object>



.. GENERATED FROM PYTHON SOURCE LINES 48-49

Lets also have a look at what's inside the demographics data.

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: default


    print(demographics)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        SUB_ID  VISIT  AGE_AT_SCAN SEX
    0   031404      1           27   F
    1   04a144      1           25   M
    2   0b78f1      1           33   M
    3   0d26b9      1           36   F
    4   1988b8      1           31   M
    ..     ...    ...          ...  ..
    77  f25714      1           30   F
    78  f25714      2           33   F
    79  f615a5      1           26   F
    80  feac6b      1           26   F
    81  feac6b      2           29   F

    [82 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 52-55

Demographics contains four variables: a subject ID, a visit number (some
subjects visited multiple times), their age at the time of scanning and their
sex. Lets also print some summary statistics.

.. GENERATED FROM PYTHON SOURCE LINES 55-67

.. code-block:: default


    # Print demographics summary.
    for i in range(1, 3):
        print(
            (
                f"Visit {i}, N={np.sum(demographics.VISIT==i)}, "
                f"{np.sum(demographics.SEX[demographics.VISIT == i] == 'F')} females, "
                f"mean subject age {np.mean(demographics.AGE_AT_SCAN[demographics.VISIT == i]):.2f}, "
                f"standard deviation of age: {np.std(demographics.AGE_AT_SCAN[demographics.VISIT==i]):.2f}."
            )
        )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Visit 1, N=70, 30 females, mean subject age 31.86, standard deviation of age: 8.82.
    Visit 2, N=12, 5 females, mean subject age 32.75, standard deviation of age: 7.19.




.. GENERATED FROM PYTHON SOURCE LINES 68-77

Next, we will assess whether a subject's age is related to their cortical
thickness. To this end we can create a linear model with BrainStat. For our
first model, we will only consider the effect of age, i.e. we will disregard
the effect of sex and that some subjects visit twice. this end we can create a
linear model with BrainStat. First we declare the age variable as a
FixedEffect. The FixedEffect class can be created in two ways: either we
provide the data with pandas, as we do here, or we provide a numpy array and a
name for the fixed effect. Lets set up the model Y = intercept + B1 * age. Note
that BrainStat includes an intercept by default.

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default


    from brainstat.stats.terms import FixedEffect

    term_age = FixedEffect(demographics.AGE_AT_SCAN)
    model = term_age








.. GENERATED FROM PYTHON SOURCE LINES 84-86

As said before, if your data is not in a pandas DataFrame (e.g. numpy), you'll
have to provide the name of the effect as an additional parameter as follows:

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: default

    term_age_2 = FixedEffect(demographics.AGE_AT_SCAN.to_numpy(), "AGE_AT_SCAN")








.. GENERATED FROM PYTHON SOURCE LINES 89-95

Lets have a look at one of these models. As you can see below, the model is
stored in a format closely resembling a pandas DataFrame. Note that an
intercept is automatically added to the model. This behavior can be disabled
in the FixedEffect call, but we recommend leaving it enabled. We can also
access the vectors related to each effect by their name i.e. model.intercept
and model.AGE_AT_SCAN will return the vectors of the intercept and age, respectively.

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: default


    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        intercept  AGE_AT_SCAN
    0           1           27
    1           1           25
    2           1           33
    3           1           36
    4           1           31
    ..        ...          ...
    77          1           30
    78          1           33
    79          1           26
    80          1           26
    81          1           29

    [82 rows x 2 columns]




.. GENERATED FROM PYTHON SOURCE LINES 99-104

Now, imagine we have some cortical marker (e.g. cortical thickness) for each
subject, and we want to evaluate whether this marker is different across the
the lifespan. To do this, we can use the model we defined before, and a
contrast in observations (here: age). Then we simply initialize an SLM model
and fit it to the cortical thickness data.

.. GENERATED FROM PYTHON SOURCE LINES 104-118

.. code-block:: default


    from brainstat.stats.SLM import SLM

    contrast_age = demographics.AGE_AT_SCAN
    slm_age = SLM(
        model,
        contrast_age,
        surf="fsaverage5",
        mask=mask,
        correction=["fdr", "rft"],
        cluster_threshold=0.01,
    )
    slm_age.fit(thickness)








.. GENERATED FROM PYTHON SOURCE LINES 119-127

Before we go any further, we can quickly assess the quality and
robustness of the fitted model. We can do this for every vertex/parcel
on the cortex (default), for one vertex (see example below for the 88th
vertex), or for a set of specific vertices. Our function slm.qc outputs
a histogram of the residuals and a qq plot of the residuals versus the
theoretical quantile values from a normal distribution. We can also map
vertexwise measures of skewness and kurtosis (characterizing the residuals
distribution) across the cortex.

.. GENERATED FROM PYTHON SOURCE LINES 127-128

.. code-block:: default

    skwn, krts = slm_age.qc(thickness, v=87)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_002.png
         :alt: Histogram of the residuals
         :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_003.png
         :alt: QQ plot of sample data versus standard normal
         :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_003.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 129-144

.. code-block:: default

    plot_hemispheres(
        pial_left,
        pial_right,
        np.vstack([skwn.T, krts.T]),
        cmap="viridis",
        embed_nb=True,
        size=(1400, 200),
        zoom=1.8,
        nan_color=(0.7, 0.7, 0.7, 1),
        interactive=False,
        color_bar=True,
        label_text=["Skewness", "Kurtosis"],
        cb__labelTextProperty={"fontSize": 12},
    )




.. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_004.png
   :alt: plot tutorial 01 basics
   :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <IPython.core.display.Image object>



.. GENERATED FROM PYTHON SOURCE LINES 145-150

The resulting model, slm_age, will contain the t-statistic map, p-values
derived with the requested corrections, and a myriad of other properties (see
the API for more details). Lets plot the t-values and p-values on the surface.
We'll do this a few times throughout the tutorial so lets define a function to
do this.

.. GENERATED FROM PYTHON SOURCE LINES 150-180

.. code-block:: default



    def plot_slm_results(slm, plot_peak=False, plot_fdr=False):

        handles = [local_plot_hemispheres(slm.t, ["t-values"], (-4, 4), "bwr")]

        plot_pvalues = [np.copy(slm.P["pval"]["C"])]
        labels = ["Cluster p-values"]

        if plot_peak:
            plot_pvalues.append(np.copy(slm.P["pval"]["P"]))
            labels.append("Peak p-vales")

        if plot_fdr:
            plot_pvalues.append(np.copy(slm.Q))
            labels.append("Vertex p-values")

        [np.place(x, np.logical_or(x > 0.05, ~mask), np.nan) for x in plot_pvalues]

        for i in range(len(plot_pvalues)):
            handles.append(
                local_plot_hemispheres(plot_pvalues[i], [labels[i]], (0, 0.05), "plasma_r")
            )

        return handles


    plot_slm_results(slm_age, plot_peak=True, plot_fdr=True)





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_005.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_005.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_006.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_006.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_007.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_007.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_008.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_008.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>, <IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 181-193

Only clusters are significant, and not peaks. This suggests that the age
effect covers large regions, rather than local foci. Furthermore, at the
vertexwise level we only find a small group of significant vertices in the
left cingulate cortex. Lets have a closer look at the clusters and their
peaks. The data on clusters are stored in tables inside BrainStatModel.P.clus
and information on the peaks is stored in BrainStatModel.P.peak. If a
two-tailed test is run (BrainStat defaults to two-tailed), a table is returned
for each tail. The first table uses the contrast as provided, the second table
uses the inverse contrast. If a one-tailed test is performed, then only a
single table is returned. Lets print the first 15 rows of the inverted
contrast cluster table.


.. GENERATED FROM PYTHON SOURCE LINES 193-196

.. code-block:: default


    print(slm_age.P["clus"][1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

        clusid  nverts    resels         P
    0        1   141.0  6.283315  0.000033
    1        2    82.0  3.994467  0.001858
    2        3    69.0  3.871711  0.002362
    3        4    61.0  3.670485  0.003517
    4        5    82.0  3.652319  0.003648
    ..     ...     ...       ...       ...
    73      74     1.0  0.050811  1.000000
    74      75     1.0  0.043958  1.000000
    75      76     1.0  0.039022  1.000000
    76      77     1.0  0.032002  1.000000
    77      78     1.0  0.019503  1.000000

    [78 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 197-200

Here, we see that cluster 1 contains 373 vertices. Clusters are sorted by
p-value; later clusters will generally be smaller and have higher p-values.
Lets now have a look at the peaks within these clusters.

.. GENERATED FROM PYTHON SOURCE LINES 200-203

.. code-block:: default


    print(slm_age.P["peak"][1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                t  vertid  clusid          P               yeo7
    0    5.695420   18720      11   0.001248  Ventral Attention
    1    5.164823    5430      12   0.009035             Limbic
    2    4.855500   16911       6   0.027242  Ventral Attention
    3    4.833974   19629       2   0.029335     Frontoparietal
    4    4.628306   12603      14   0.059519       Default mode
    ..        ...     ...     ...        ...                ...
    109  2.403000    2276      62  23.356468  Ventral Attention
    110  2.394788    2185      74  23.709038       Default mode
    111  2.389922   14687      76  23.918494       Default mode
    112  2.382012    6087      64  24.258914       Default mode
    113  2.375295    3243      72  24.548027       Default mode

    [114 rows x 5 columns]




.. GENERATED FROM PYTHON SOURCE LINES 204-210

Within cluster 1, we are able to detect several peaks. The peak with the
highest t-statistic (t=4.3972) occurs at vertex 19629, which is inside the
frontoparietal network as defined by the Yeo-7 networks. Note that the Yeo
network membership is only provided if the surface is specified as a template
name as we did here. For custom surfaces, or pre-loaded surfaces (as we will
use below) this column is omitted.

.. GENERATED FROM PYTHON SOURCE LINES 212-216

Interaction effects models
----------------------------

Similarly to age, we can also test for the effect of sex on cortical thickness.

.. GENERATED FROM PYTHON SOURCE LINES 216-223

.. code-block:: default


    term_sex = FixedEffect(demographics.SEX)
    model_sex = term_sex
    contrast_sex = (demographics.SEX == "M").astype(int) - (demographics.SEX == "F").astype(
        int
    )








.. GENERATED FROM PYTHON SOURCE LINES 224-225

Next we will rerrun the model and see if our results change.

.. GENERATED FROM PYTHON SOURCE LINES 225-238

.. code-block:: default


    slm_sex = SLM(
        model_sex,
        contrast_sex,
        surf=pial_combined,
        mask=mask,
        correction=["fdr", "rft"],
        two_tailed=False,
        cluster_threshold=0.01,
    )
    slm_sex.fit(thickness)
    plot_slm_results(slm_sex)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_009.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_009.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_010.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_010.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 239-243

Here, we find few significant effects of sex on cortical thickness. However, as
we've already established, age has an effect on cortical thickness. So we may
want to correct for this effect before evaluating whether sex has an effect on
cortical thickenss. Lets make a new model that includes the effect of age.

.. GENERATED FROM PYTHON SOURCE LINES 243-246

.. code-block:: default


    model_sexage = term_age + term_sex








.. GENERATED FROM PYTHON SOURCE LINES 247-248

Next we will rerrun the model and see if our results change.

.. GENERATED FROM PYTHON SOURCE LINES 248-261

.. code-block:: default


    slm_sexage = SLM(
        model_sexage,
        contrast_sex,
        surf=pial_combined,
        mask=mask,
        correction=["fdr", "rft"],
        two_tailed=False,
        cluster_threshold=0.01,
    )
    slm_sexage.fit(thickness)
    plot_slm_results(slm_sexage)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_011.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_011.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_012.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_012.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 262-267

After accounting for the effect of age, we still find only one significant
cluster of effect of sex on cortical thickness. However, it could be that age
affects men and women differently. To account for this, we could include an
interaction effect into the model. Lets run the model again with an
interaction effect.

.. GENERATED FROM PYTHON SOURCE LINES 267-282

.. code-block:: default


    # Effect of sex on cortical thickness.
    model_sexage_int = term_age + term_sex + term_age * term_sex

    slm_sexage_int = SLM(
        model_sexage_int,
        contrast_sex,
        surf=pial_combined,
        mask=mask,
        correction=["rft"],
        cluster_threshold=0.01,
    )
    slm_sexage_int.fit(thickness)
    plot_slm_results(slm_sexage_int)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_013.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_013.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_014.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_014.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 283-288

After including the interaction effect, we no significant effects of
sex on cortical thickness in several clusters.

We could also look at whether the cortex of men and women changes
differently with age by comparing their interaction effects.

.. GENERATED FROM PYTHON SOURCE LINES 288-305

.. code-block:: default


    # Effect of age on cortical thickness for the healthy group.
    contrast_sex_int = demographics.AGE_AT_SCAN * (
        demographics.SEX == "M"
    ) - demographics.AGE_AT_SCAN * (demographics.SEX == "F")

    slm_sex_int = SLM(
        model_sexage_int,
        contrast_sex_int,
        surf=pial_combined,
        mask=mask,
        correction=["rft"],
        cluster_threshold=0.01,
    )
    slm_sex_int.fit(thickness)
    plot_slm_results(slm_sex_int)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_015.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_015.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_016.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_016.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 306-308

Indeed, it appears that the interaction effect between sex and age is quite
different across men and women, with stronger effects occuring in women.

.. GENERATED FROM PYTHON SOURCE LINES 310-312

One-tailed Test
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 314-324

Imagine that, based on prior research, we hypothesize that men have higher
cortical thickness than women. In that case, we could run this same model with
a one-tailed test, rather than a two-tailed test. By default BrainStat uses a
two-tailed test. If you want to get a one-tailed test, simply specify it in
the SLM model initialization with 'two_tailed', false. Note that the
one-tailed test will test for the significance of positive t-values. If you
want to test for the significance of negative t-values, simply change the sign
of the contrast. We may hypothesize based on prior research that cortical
thickness decreases with age, so we could specify this as follows. Note the
minus in front of contrast_age to test for decreasing thickness with age.

.. GENERATED FROM PYTHON SOURCE LINES 324-339

.. code-block:: default


    from brainstat.stats.SLM import SLM

    slm_onetailed = SLM(
        model_sexage_int,
        -contrast_age,
        surf=pial_combined,
        mask=mask,
        correction=["rft"],
        cluster_threshold=0.01,
        two_tailed=False,
    )
    slm_onetailed.fit(thickness)
    plot_slm_results(slm_onetailed)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_017.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_017.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_018.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_018.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 340-341

Notice the additional clusters that we find when using a one-tailed test.

.. GENERATED FROM PYTHON SOURCE LINES 343-345

Mixed Effects Models
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 347-352

So far, we've considered multiple visits of the same subject as two separate,
independent measurements. Clearly, however, such measurements are not
independent of each other. To account for this, we could add subject ID as a
random effect. Lets do this and test the effect of age on cortical thickness
again.

.. GENERATED FROM PYTHON SOURCE LINES 352-372

.. code-block:: default



    from brainstat.stats.terms import MixedEffect

    term_subject = MixedEffect(demographics.SUB_ID)

    model_mixed = term_age + term_sex + term_age * term_sex + term_subject

    slm_mixed = SLM(
        model_mixed,
        -contrast_age,
        surf=pial_combined,
        mask=mask,
        correction=["fdr", "rft"],
        cluster_threshold=0.01,
        two_tailed=False,
    )
    slm_mixed.fit(thickness)
    plot_slm_results(slm_mixed, True, True)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_019.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_019.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_020.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_020.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_021.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_021.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_022.png
          :alt: plot tutorial 01 basics
          :srcset: /python/generated_tutorials/images/sphx_glr_plot_tutorial_01_basics_022.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<IPython.core.display.Image object>, <IPython.core.display.Image object>, <IPython.core.display.Image object>, <IPython.core.display.Image object>]



.. GENERATED FROM PYTHON SOURCE LINES 373-379

Compared to our first age model, we find fewer and smaller clusters,
indicating that by not accounting for the repeated measures structure of the
data we were overestimating the significance of effects.

That concludes the basic usage of the BrainStat for statistical models. In the
next tutorial we'll show you how to use the context decoding module.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.952 seconds)


.. _sphx_glr_download_python_generated_tutorials_plot_tutorial_01_basics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_tutorial_01_basics.py <plot_tutorial_01_basics.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_tutorial_01_basics.ipynb <plot_tutorial_01_basics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
