
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "python/generated_tutorials/plot_tutorial_02_context.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_python_generated_tutorials_plot_tutorial_02_context.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_python_generated_tutorials_plot_tutorial_02_context.py:


Tutorial 02: Context Decoding
=========================================

In this tutorial you will learn about the context decoding tools included with
BrainStat. The context decoding module consists of three parts: genetic
decoding, meta-analytic decoding and histological comparisons. First, we'll
consider how to run the genetic decoding analysis. 


Genetics
--------

For genetic decoding we use the Allen Human Brain Atlas through the abagen
toolbox. Note that abagen only accepts parcellated data. Here is a minimal
example of how we use abagen to get the genetic expression of the 400 regions
of the Schaefer atlas. Please note that downloading the dataset and running this
analysis can take several minutes.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default


    import numpy as np
    from brainstat.context.genetics import surface_genetic_expression
    from brainstat.datasets import fetch_parcellation, fetch_template_surface

    schaefer_400 = fetch_parcellation("fsaverage5", "schaefer", 400)
    surfaces = fetch_template_surface("fsaverage5", join=False)

    expression = surface_genetic_expression(schaefer_400, surfaces, space="fsaverage")
    print(expression)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    If you use BrainStat's genetics functionality, please cite abagen (https://abagen.readthedocs.io/en/stable/citing.html).
    gene_symbol      A1BG  A1BG-AS1       A2M     A2ML1   A3GALT2    A4GALT      AAAS      AACS   AADACL3  ...    ZWILCH     ZWINT      ZXDA      ZXDB      ZXDC    ZYG11B       ZYX     ZZEF1      ZZZ3
    label                                                                                                  ...                                                                                          
    1            0.616241  0.663905  0.346942  0.442031  0.528662  0.385995  0.450701  0.610946  0.700893  ...  0.677480  0.670887  0.735968  0.393920  0.530751  0.654544  0.379364  0.557027  0.416022
    2            0.695402  0.552844  0.438033  0.454978  0.495349  0.426254  0.313420  0.677285  0.482006  ...  0.709731  0.693832  0.622805  0.544404  0.500129  0.554081  0.293495  0.392343  0.601068
    3            0.505258  0.561028  0.534480  0.517866  0.451078  0.377681  0.635056  0.646470  0.506606  ...  0.477834  0.506369  0.543594  0.559509  0.445725  0.528291  0.656205  0.573194  0.564922
    4            0.405253  0.393486  0.494290  0.672039  0.562577  0.462485  0.426054  0.581588  0.671947  ...  0.421138  0.418171  0.514962  0.620589  0.505453  0.518247  0.525360  0.667703  0.418323
    5            0.264929  0.120622  0.494322  0.766259  0.917175  0.179186  0.413368  0.388243  0.637066  ...  0.554290  0.299879  0.473553  0.829499  0.775317  0.519083  0.815647  0.812410  0.364021
    ...               ...       ...       ...       ...       ...       ...       ...       ...       ...  ...       ...       ...       ...       ...       ...       ...       ...       ...       ...
    396               NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    397          0.499900  0.259409  0.405187  0.844304  0.600706  0.775612  0.505645  0.312653  0.450115  ...  0.409626  0.142667  0.414844  0.941867  0.747326  0.485406  0.390599  0.443900  0.330393
    398          0.635517  0.701399  0.528614  0.323811  0.622531  0.564279  0.602727  0.708670  0.341587  ...  0.383145  0.317572  0.383137  0.208097  0.355344  0.632177  0.602474  0.233541  0.478760
    399          0.476907  0.322261  0.361887  0.351364  0.173268  0.866365  0.384485  0.466906  0.067823  ...  0.537216  0.104176  0.655510  0.497964  0.809990  0.408175  0.666588  0.284690  0.362532
    400               NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN       NaN

    [400 rows x 15631 columns]




.. GENERATED FROM PYTHON SOURCE LINES 32-53

Expression is a pandas DataFrame which shows the genetic expression of genes
within each region of the atlas. By default, the values will fall in the range
[0, 1] where higher values represent higher expression. However, if you change
the normalization function then this may change. Some regions may return NaN
values for all genes. This occurs when there are no samples within this
region across all donors.

By default, BrainStat uses all the default abagen parameters. If you wish to
customize these parameters then the keyword arguments can be passed directly
to `surface_genetic_expression`. For a full list of these arguments and their
function please consult the abagen documentation.

Meta-Analytic
-------------
To perform meta-analytic decoding, BrainStat uses precomputed Neurosynth maps.
Here we test which terms are most associated with a map of cortical thickness.
A simple example analysis can be run as follows. First, we will load some
cortical thickness data and two cortical surfaces. The ABIDE dataset provides
this data on the CIVET surface, so we will also load those surfaces. The
surface decoder interpolates the data from the surface to the voxels in the
volume that are in between the two input surfaces.

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default



    from brainstat.context.meta_analysis import surface_decoder
    from brainstat.datasets import fetch_mask
    from brainstat.tutorial.utils import fetch_abide_data

    civet_mask = fetch_mask("civet41k")
    civet_surface_mid = fetch_template_surface("civet41k", layer="mid", join=False)
    civet_surface_white = fetch_template_surface("civet41k", layer="white", join=False)
    subject_thickness, demographics = fetch_abide_data(sites=["PITT"])
    thickness = subject_thickness.mean(axis=0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0it [00:00, ?it/s]    Fetching thickness data for subject 1 out of 56: : 0it [00:00, ?it/s]    Fetching thickness data for subject 1 out of 56: : 1it [00:00,  4.69it/s]    Fetching thickness data for subject 2 out of 56: : 1it [00:00,  4.69it/s]    Fetching thickness data for subject 2 out of 56: : 2it [00:00,  4.79it/s]    Fetching thickness data for subject 3 out of 56: : 2it [00:00,  4.79it/s]    Fetching thickness data for subject 3 out of 56: : 3it [00:00,  4.85it/s]    Fetching thickness data for subject 4 out of 56: : 3it [00:00,  4.85it/s]    Fetching thickness data for subject 4 out of 56: : 4it [00:00,  4.87it/s]    Fetching thickness data for subject 5 out of 56: : 4it [00:00,  4.87it/s]    Fetching thickness data for subject 5 out of 56: : 5it [00:01,  4.90it/s]    Fetching thickness data for subject 6 out of 56: : 5it [00:01,  4.90it/s]    Fetching thickness data for subject 6 out of 56: : 6it [00:01,  4.91it/s]    Fetching thickness data for subject 7 out of 56: : 6it [00:01,  4.91it/s]    Fetching thickness data for subject 7 out of 56: : 7it [00:01,  4.90it/s]    Fetching thickness data for subject 8 out of 56: : 7it [00:01,  4.90it/s]    Fetching thickness data for subject 8 out of 56: : 8it [00:01,  4.92it/s]    Fetching thickness data for subject 9 out of 56: : 8it [00:01,  4.92it/s]    Fetching thickness data for subject 9 out of 56: : 9it [00:01,  4.92it/s]    Fetching thickness data for subject 10 out of 56: : 9it [00:01,  4.92it/s]    Fetching thickness data for subject 10 out of 56: : 10it [00:02,  4.89it/s]    Fetching thickness data for subject 11 out of 56: : 10it [00:02,  4.89it/s]    Fetching thickness data for subject 11 out of 56: : 11it [00:02,  4.93it/s]    Fetching thickness data for subject 12 out of 56: : 11it [00:02,  4.93it/s]    Fetching thickness data for subject 12 out of 56: : 12it [00:02,  4.88it/s]    Fetching thickness data for subject 13 out of 56: : 12it [00:02,  4.88it/s]    Fetching thickness data for subject 13 out of 56: : 13it [00:02,  4.89it/s]    Fetching thickness data for subject 14 out of 56: : 13it [00:02,  4.89it/s]    Fetching thickness data for subject 14 out of 56: : 14it [00:02,  4.89it/s]    Fetching thickness data for subject 15 out of 56: : 14it [00:02,  4.89it/s]    Fetching thickness data for subject 15 out of 56: : 15it [00:03,  4.91it/s]    Fetching thickness data for subject 16 out of 56: : 15it [00:03,  4.91it/s]    Fetching thickness data for subject 16 out of 56: : 16it [00:03,  4.89it/s]    Fetching thickness data for subject 17 out of 56: : 16it [00:03,  4.89it/s]    Fetching thickness data for subject 17 out of 56: : 17it [00:03,  4.91it/s]    Fetching thickness data for subject 18 out of 56: : 17it [00:03,  4.91it/s]    Fetching thickness data for subject 18 out of 56: : 18it [00:03,  4.92it/s]    Fetching thickness data for subject 19 out of 56: : 18it [00:03,  4.92it/s]    Fetching thickness data for subject 19 out of 56: : 19it [00:03,  4.89it/s]    Fetching thickness data for subject 20 out of 56: : 19it [00:03,  4.89it/s]    Fetching thickness data for subject 20 out of 56: : 20it [00:04,  4.91it/s]    Fetching thickness data for subject 21 out of 56: : 20it [00:04,  4.91it/s]    Fetching thickness data for subject 21 out of 56: : 21it [00:04,  4.90it/s]    Fetching thickness data for subject 22 out of 56: : 21it [00:04,  4.90it/s]    Fetching thickness data for subject 22 out of 56: : 22it [00:04,  4.88it/s]    Fetching thickness data for subject 23 out of 56: : 22it [00:04,  4.88it/s]    Fetching thickness data for subject 23 out of 56: : 23it [00:04,  4.91it/s]    Fetching thickness data for subject 24 out of 56: : 23it [00:04,  4.91it/s]    Fetching thickness data for subject 24 out of 56: : 24it [00:04,  4.91it/s]    Fetching thickness data for subject 25 out of 56: : 24it [00:04,  4.91it/s]    Fetching thickness data for subject 25 out of 56: : 25it [00:05,  4.89it/s]    Fetching thickness data for subject 26 out of 56: : 25it [00:05,  4.89it/s]    Fetching thickness data for subject 26 out of 56: : 26it [00:05,  4.91it/s]    Fetching thickness data for subject 27 out of 56: : 26it [00:05,  4.91it/s]    Fetching thickness data for subject 27 out of 56: : 27it [00:05,  4.87it/s]    Fetching thickness data for subject 28 out of 56: : 27it [00:05,  4.87it/s]    Fetching thickness data for subject 28 out of 56: : 28it [00:05,  4.90it/s]    Fetching thickness data for subject 29 out of 56: : 28it [00:05,  4.90it/s]    Fetching thickness data for subject 29 out of 56: : 29it [00:05,  4.88it/s]    Fetching thickness data for subject 30 out of 56: : 29it [00:05,  4.88it/s]    Fetching thickness data for subject 30 out of 56: : 30it [00:06,  4.90it/s]    Fetching thickness data for subject 31 out of 56: : 30it [00:06,  4.90it/s]    Fetching thickness data for subject 31 out of 56: : 31it [00:06,  4.93it/s]    Fetching thickness data for subject 32 out of 56: : 31it [00:06,  4.93it/s]    Fetching thickness data for subject 32 out of 56: : 32it [00:06,  4.91it/s]    Fetching thickness data for subject 33 out of 56: : 32it [00:06,  4.91it/s]    Fetching thickness data for subject 33 out of 56: : 33it [00:06,  4.93it/s]    Fetching thickness data for subject 34 out of 56: : 33it [00:06,  4.93it/s]    Fetching thickness data for subject 34 out of 56: : 34it [00:06,  4.92it/s]    Fetching thickness data for subject 35 out of 56: : 34it [00:06,  4.92it/s]    Fetching thickness data for subject 35 out of 56: : 35it [00:07,  4.91it/s]    Fetching thickness data for subject 36 out of 56: : 35it [00:07,  4.91it/s]    Fetching thickness data for subject 36 out of 56: : 36it [00:07,  4.91it/s]    Fetching thickness data for subject 37 out of 56: : 36it [00:07,  4.91it/s]    Fetching thickness data for subject 37 out of 56: : 37it [00:07,  4.87it/s]    Fetching thickness data for subject 38 out of 56: : 37it [00:07,  4.87it/s]    Fetching thickness data for subject 38 out of 56: : 38it [00:07,  4.84it/s]    Fetching thickness data for subject 39 out of 56: : 38it [00:07,  4.84it/s]    Fetching thickness data for subject 39 out of 56: : 39it [00:07,  4.86it/s]    Fetching thickness data for subject 40 out of 56: : 39it [00:07,  4.86it/s]    Fetching thickness data for subject 40 out of 56: : 40it [00:08,  4.84it/s]    Fetching thickness data for subject 41 out of 56: : 40it [00:08,  4.84it/s]    Fetching thickness data for subject 41 out of 56: : 41it [00:08,  4.84it/s]    Fetching thickness data for subject 42 out of 56: : 41it [00:08,  4.84it/s]    Fetching thickness data for subject 42 out of 56: : 42it [00:08,  4.86it/s]    Fetching thickness data for subject 43 out of 56: : 42it [00:08,  4.86it/s]    Fetching thickness data for subject 43 out of 56: : 43it [00:08,  4.86it/s]    Fetching thickness data for subject 44 out of 56: : 43it [00:08,  4.86it/s]    Fetching thickness data for subject 44 out of 56: : 44it [00:08,  4.90it/s]    Fetching thickness data for subject 45 out of 56: : 44it [00:08,  4.90it/s]    Fetching thickness data for subject 45 out of 56: : 45it [00:09,  4.90it/s]    Fetching thickness data for subject 46 out of 56: : 45it [00:09,  4.90it/s]    Fetching thickness data for subject 46 out of 56: : 46it [00:09,  4.87it/s]    Fetching thickness data for subject 47 out of 56: : 46it [00:09,  4.87it/s]    Fetching thickness data for subject 47 out of 56: : 47it [00:09,  4.89it/s]    Fetching thickness data for subject 48 out of 56: : 47it [00:09,  4.89it/s]    Fetching thickness data for subject 48 out of 56: : 48it [00:09,  4.89it/s]    Fetching thickness data for subject 49 out of 56: : 48it [00:09,  4.89it/s]    Fetching thickness data for subject 49 out of 56: : 49it [00:10,  4.91it/s]    Fetching thickness data for subject 50 out of 56: : 49it [00:10,  4.91it/s]    Fetching thickness data for subject 50 out of 56: : 50it [00:10,  4.93it/s]    Fetching thickness data for subject 51 out of 56: : 50it [00:10,  4.93it/s]    Fetching thickness data for subject 51 out of 56: : 51it [00:10,  4.90it/s]    Fetching thickness data for subject 52 out of 56: : 51it [00:10,  4.90it/s]    Fetching thickness data for subject 52 out of 56: : 52it [00:10,  4.92it/s]    Fetching thickness data for subject 53 out of 56: : 52it [00:10,  4.92it/s]    Fetching thickness data for subject 53 out of 56: : 53it [00:10,  4.91it/s]    Fetching thickness data for subject 54 out of 56: : 53it [00:10,  4.91it/s]    Fetching thickness data for subject 54 out of 56: : 54it [00:11,  4.87it/s]    Fetching thickness data for subject 55 out of 56: : 54it [00:11,  4.87it/s]    Fetching thickness data for subject 55 out of 56: : 55it [00:11,  4.90it/s]    Fetching thickness data for subject 56 out of 56: : 55it [00:11,  4.90it/s]    Fetching thickness data for subject 56 out of 56: : 56it [00:11,  4.90it/s]    Fetching thickness data for subject 56 out of 56: : 56it [00:11,  4.89it/s]




.. GENERATED FROM PYTHON SOURCE LINES 66-69

Next we can run the analysis. Note that the data, surfaces, and mask have to
be provided seperately for each hemisphere. Also note that downloading the
dataset and running this analysis can take several minutes.

.. GENERATED FROM PYTHON SOURCE LINES 69-77

.. code-block:: default


    meta_analysis = surface_decoder(
        civet_surface_mid,
        civet_surface_white,
        [thickness[: len(thickness) // 2], thickness[len(thickness) // 2 :]],
    )
    print(meta_analysis)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                    Pearson's r
    temporal           0.389824
    frontotemporal     0.380859
    pole               0.363267
    dementia           0.346098
    empathic           0.314584
    ...                     ...
    visual            -0.282120
    parieto           -0.282926
    sighted           -0.290601
    primary           -0.306733
    v1                -0.371183

    [3228 rows x 1 columns]




.. GENERATED FROM PYTHON SOURCE LINES 78-89

meta_analysis now contains a pandas.dataFrame with the correlation values
for each requested feature. If no feature was requested (like here) then
the analysis is run across all features.


Histological decoding
---------------------
For histological decoding we use microstructural profile covariance gradients,
as first shown by (Paquola et al, 2019, Plos Biology), computed from the
BigBrain dataset. Firstly, lets download the MPC data and compute its
gradients.

.. GENERATED FROM PYTHON SOURCE LINES 89-102

.. code-block:: default


    from brainstat.context.histology import (
        compute_histology_gradients,
        compute_mpc,
        read_histology_profile,
    )
    from brainstat.datasets import fetch_parcellation

    # Run the analysis
    histology_profiles = read_histology_profile(template="fsaverage5")
    mpc = compute_mpc(histology_profiles, labels=schaefer_400)
    gradient_map = compute_histology_gradients(mpc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/reinder/GitHub/BrainStat/brainstat/context/histology.py:103: RuntimeWarning: divide by zero encountered in true_divide
      mpc = 0.5 * np.log((1 + p_corr) / (1 - p_corr))
    /Users/reinder/GitHub/BrainStat/brainstat/context/histology.py:103: RuntimeWarning: invalid value encountered in log
      mpc = 0.5 * np.log((1 + p_corr) / (1 - p_corr))




.. GENERATED FROM PYTHON SOURCE LINES 103-110

The variable histology_profiles now contains histological profiles sampled at
50 different depths across the cortex, mpc contains the covariance of these
profiles, and gradient_map contains their gradients. Depending on your
use-case, each of these variables could be of interest, but for purposes of
this tutorial we'll plot the gradients to the surface with BrainSpace. For
details on what the GradientMaps class, gm, contains please consult the
BrainSpace documentation.

.. GENERATED FROM PYTHON SOURCE LINES 110-135

.. code-block:: default


    from brainspace.plotting.surface_plotting import plot_hemispheres
    from brainspace.utils.parcellation import map_to_labels

    surfaces = fetch_template_surface("fsaverage5", join=False)

    vertexwise_data = []
    for i in range(0, 2):
        vertexwise_data.append(
            map_to_labels(
                gradient_map.gradients_[:, i],
                schaefer_400,
                mask=schaefer_400 != 0,
                fill=np.nan,
            )
        )

    plot_hemispheres(
        surfaces[0],
        surfaces[1],
        vertexwise_data,
        embed_nb=True,
        label_text=["Gradient 1", "Gradient 2"],
    )




.. image:: /python/generated_tutorials/images/sphx_glr_plot_tutorial_02_context_001.png
    :alt: plot tutorial 02 context
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/reinder/opt/miniconda3/envs/python3.8/lib/python3.8/site-packages/brainspace/plotting/base.py:287: UserWarning: Interactive mode requires 'panel'. Setting 'interactive=False'
      warnings.warn("Interactive mode requires 'panel'. "

    <IPython.core.display.Image object>



.. GENERATED FROM PYTHON SOURCE LINES 136-144

Note that we no longer use the y-axis regression used in (Paquola et al, 2019,
Plos Biology), as such the first gradient becomes an anterior-posterior-
gradient.

That concludes the tutorials of BrainStat. If anything is unclear, or if you
think you've found a bug, please post it to the Issues page of our Github.

Happy BrainStating!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  15.649 seconds)


.. _sphx_glr_download_python_generated_tutorials_plot_tutorial_02_context.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tutorial_02_context.py <plot_tutorial_02_context.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tutorial_02_context.ipynb <plot_tutorial_02_context.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
